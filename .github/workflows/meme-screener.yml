name: Meme Screener — 2 screenshots daily

on:
  schedule:
    - cron: "0 0 * * *"        # 00:00 UTC every day (UTC close)
  workflow_dispatch: {}        # Manual Run button

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      TZ: Australia/Sydney
      MPLBACKEND: Agg
      # Hard-wired creds (move to repo Secrets later if you like)
      CRYPTOCOMPARE_API_KEY: d5ddb7a7f49de4d4a8af07e98e0ebf437e7acc8bb282f12af978320486f741e7
      DISCORD_WEBHOOK_URL: https://discord.com/api/webhooks/1429701285975949322/fS0y9EkVQtnP15CJkAQEHEdpgL5Hlk43-Ct4D9uyZjjJT2jbk9nPkETT5cbbGGDyPVqD

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install numpy pandas requests matplotlib
          fi
          pip install "jinja2>=3.1,<4" playwright
          python -m playwright install --with-deps chromium

      - name: Run screener (ALT LEAGUE, no extension)
        run: |
          echo "Sydney: $(date)"
          python "ALT LEAGUE"

      - name: Gather outputs
        run: |
          set -e
          mkdir -p out
          cp -f meme_screener_daily.html out/ || true
          cp -f meme_screener_daily.csv  out/ || true
          cp -f meme_rsps_backtest.png   out/ || true
          echo "Root files:"; ls -lah
          echo "out files:"; ls -lah out

      - name: Screenshot table (Playwright → out/table.png)
        run: |
          if [ ! -f out/meme_screener_daily.html ]; then
            echo "No HTML to screenshot"; exit 0; fi
          python - <<'PY'
from pathlib import Path
from playwright.sync_api import sync_playwright

html = Path("out/meme_screener_daily.html").resolve().as_uri()
out_png = "out/table.png"

with sync_playwright() as p:
    browser = p.chromium.launch()
    ctx = browser.new_context(viewport={"width":1600, "height":1200}, device_scale_factor=1)
    page = ctx.new_page()
    page.goto(html, wait_until="load")
    try:
        page.locator("table").first.screenshot(path=out_png, animations="disabled", timeout=8000)
    except Exception:
        page.screenshot(path=out_png, full_page=True, animations="disabled")
    browser.close()

print("Saved", out_png)
PY
          ls -lah out

      - name: Normalize backtest name (→ out/backtest.png)
        run: |
          if [ -f out/meme_rsps_backtest.png ]; then
            mv -f out/meme_rsps_backtest.png out/backtest.png
          elif ls out/*backtest*.png 1>/dev/null 2>&1; then
            mv -f "$(ls out/*backtest*.png | head -n1)" out/backtest.png
          fi
          ls -lah out

      - name: Post to Discord (2 screenshots + csv if exists)
        run: |
          SYD_DATE="$(date +%Y-%m-%d)"
          # Base message (so you always see something)
          curl -sS -H "Content-Type: application/json" \
               -X POST "$DISCORD_WEBHOOK_URL" \
               -d "{\"content\":\"Meme Screener — ${SYD_DATE}\\nTable + equity curve.\"}" >/dev/null

          declare -a args
          [ -f out/table.png ]    && args+=(-F "file1=@out/table.png;type=image/png;filename=table-${SYD_DATE}.png")
          [ -f out/backtest.png ] && args+=(-F "file2=@out/backtest.png;type=image/png;filename=backtest-${SYD_DATE}.png")
          [ -f out/meme_screener_daily.csv ] && args+=(-F "file3=@out/meme_screener_daily.csv;type=text/csv;filename=screener-${SYD_DATE}.csv")

          if [ ${#args[@]} -gt 0 ]; then
            curl -sS -X POST "$DISCORD_WEBHOOK_URL" \
                 -F "payload_json={\"content\":\"Attachments for ${SYD_DATE}\"}" \
                 "${args[@]}" >/dev/null
          else
            echo "No attachments found; only sent base message."
          fi

      - name: Upload artifacts (optional)
        uses: actions/upload-artifact@v4
        with:
          name: meme-screener-${{ github.run_id }}
          path: out/







