name: Daily RSI-SuperTrend (Discord)

on:
  schedule:
    # AEDT (UTC+11): 00:05 UTC == 11:05 Sydney
    - cron: "5 0 * * *"
    # AEST (UTC+10): 01:05 UTC == 11:05 Sydney
    - cron: "5 1 * * *"
  workflow_dispatch:
    inputs:
      run_anyway:
        description: "Bypass the Sydney-time gate and run now (for testing)"
        type: boolean
        default: false

concurrency:
  group: rsi-supertrend-daily
  cancel-in-progress: false

permissions:
  contents: read

env:
  TZ: Australia/Sydney

jobs:
  run:
    # Only scheduled runs proceed by default; manual needs explicit override.
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.run_anyway == true)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Show trigger info
        shell: bash
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Cron:  ${{ github.event.schedule || 'n/a' }}"
          echo "UTC now: $(date -u)"
          TZ=Australia/Sydney date "+Sydney now: %Y-%m-%d %H:%M:%S %Z"

      - name: Gate by Sydney local time (11:05–11:14 window)
        id: gate
        shell: bash
        run: |
          SYD_H=$(TZ=Australia/Sydney date +%H)
          SYD_M=$(TZ=Australia/Sydney date +%M)
          echo "Sydney clock H=$SYD_H M=$SYD_M"

          # Manual override for testing
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.run_anyway }}" = "true" ]; then
            echo "run=true" >> "$GITHUB_OUTPUT"
            echo "Decision: proceed (manual override)."
            exit 0
          fi

          # Allow 10-minute jitter window: 11:05–11:14 inclusive
          if [ "$SYD_H" = "11" ] && [ "$SYD_M" -ge 5 ] && [ "$SYD_M" -le 14 ]; then
            echo "run=true" >> "$GITHUB_OUTPUT"
            echo "Decision: proceed (within 11:05–11:14 Sydney window)."
          else
            echo "run=false" >> "$GITHUB_OUTPUT"
            echo "Decision: skip (outside 11:05–11:14 Sydney window)."
          fi

      - name: Check out repo
        if: steps.gate.outputs.run == 'true'
        uses: actions/checkout@v4

      - name: Set up Python
        if: steps.gate.outputs.run == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Upgrade pip
        if: steps.gate.outputs.run == 'true'
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        if: steps.gate.outputs.run == 'true'
        run: |
          pip install "numpy==1.26.4" "pandas==2.2.2" "matplotlib==3.9.2" \
                      "ta==0.11.0" "requests>=2.31"

      - name: Run strategy script
        if: steps.gate.outputs.run == 'true'
        # Your script name exactly (no .py extension)
        run: python "RSPS THE OG"

      - name: Upload chart image (artifact)
        if: steps.gate.outputs.run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: equity-curve
          path: rsi_supertrend_backtest.png

      - name: Post results to Discord (hardcoded webhook)
        if: steps.gate.outputs.run == 'true'
        shell: bash
        env:
          HOOK: "https://canary.discord.com/api/webhooks/1425769640876965990/rJb62mNKfI5aKUeUxNHkPjZ424c3gd3qaWo6IFeY5Y1RwI_Fu_yyWqn33OY6vHm69efE"
        run: |
          RUN_TS="$(TZ=Australia/Sydney date '+%Y-%m-%d %H:%M %Z')"
          MSG="✅ RSI-SuperTrend run finished at ${RUN_TS}"

          if [ -f "rsi_supertrend_backtest.png" ]; then
            curl -sS -X POST \
              -F "payload_json={\"content\":\"${MSG}\",\"allowed_mentions\":{\"parse\":[]}}" \
              -F "file1=@rsi_supertrend_backtest.png" \
              "$HOOK"
          else
            curl -sS -H "Content-Type: application/json" -X POST \
              -d "{\"content\":\"${MSG} (chart not found)\",\"allowed_mentions\":{\"parse\":[]}}" \
              "$HOOK"
          fi












